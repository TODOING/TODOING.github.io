<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水滴-Waterdrop</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://TODOING.github.io/"/>
  <updated>2017-12-04T07:10:11.729Z</updated>
  <id>https://TODOING.github.io/</id>
  
  <author>
    <name>Waterdrop</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用网站</title>
    <link href="https://TODOING.github.io/2017/12/04/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>https://TODOING.github.io/2017/12/04/常用网站/</id>
    <published>2017-12-04T06:26:06.000Z</published>
    <updated>2017-12-04T07:10:11.729Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/website.jpg" alt=""></p><a id="more"></a><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p><code>cppreference</code></p><blockquote><p><a href="http://en.cppreference.com/w/c" target="_blank" rel="external">http://en.cppreference.com/w/c-英文版</a><br><a href="http://zh.cppreference.com/w/c" target="_blank" rel="external">http://zh.cppreference.com/w/c-中文版</a></p></blockquote><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><p><code>cppreference</code></p><blockquote><p><a href="http://en.cppreference.com/w/cpp" target="_blank" rel="external">http://en.cppreference.com/w/cpp-英文版</a><br><a href="http://zh.cppreference.com/w/cpp" target="_blank" rel="external">http://zh.cppreference.com/w/cpp-中文版</a></p></blockquote><p><code>cplusplus</code></p><blockquote><p><a href="http://www.cplusplus.com/reference/" target="_blank" rel="external">http://www.cplusplus.com/reference/</a></p></blockquote><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><code>Linux命令大全</code></p><blockquote><p><a href="http://man.linuxde.net/" target="_blank" rel="external">http://man.linuxde.net/</a></p></blockquote><p><code>鸟哥的Linux私房菜</code></p><blockquote><p><a href="http://linux.vbird.org/" target="_blank" rel="external">http://linux.vbird.org/</a></p></blockquote><p><code>Learn Vim Progressively</code></p><blockquote><p><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="external">http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/website.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="常用网站" scheme="https://TODOING.github.io/tags/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://TODOING.github.io/2017/12/03/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://TODOING.github.io/2017/12/03/Linux/Linux常用命令/</id>
    <published>2017-12-03T14:09:14.000Z</published>
    <updated>2017-12-04T01:52:37.885Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Linux命令.png" alt=""><br><a id="more"></a></p><h2 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h2><h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><p>创建目录</p><p><code>语法</code></p><blockquote><p>mkdir (选项)(参数)</p></blockquote><p><code>选项</code></p><blockquote><p>-Z : 设置安全上下文，当使用SELinux时有效;<br><strong>-m&lt;目标属性&gt;</strong> 或 –mode&lt;目标属性&gt; : 建立目录的同时设置目录的权限;<br><strong>-p</strong> 或 –parents : 若所要建立的目录的上层目录尚未建立，则会一并建立上层目录;<br>–version : 显示版本信息。</p></blockquote><p><code>参数</code></p><blockquote><p>目录 : 指定要创建的目录列表，多个目录之间用空格隔开。</p></blockquote><p><code>实例</code><br>在目录<code>/home/pl</code>下建立子目录test，并且只有文件主有读、写和执行权限，其他人无权访问</p><blockquote><p>mkdir -m 700 /home/pl/test</p></blockquote><p>在当前目录中建立bin下的os_1目录，权限设置为文件主可读、写和执行，同组用户可读和执行，其他用户无权访问</p><blockquote><p>mkdir -p-m 750 bin/os_1</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Linux命令.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://TODOING.github.io/categories/Linux/"/>
    
    
      <category term="Linux常用命令" scheme="https://TODOING.github.io/tags/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>磁盘存储器</title>
    <link href="https://TODOING.github.io/2017/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%99%A8/"/>
    <id>https://TODOING.github.io/2017/11/15/计算机组成/磁盘存储器/</id>
    <published>2017-11-15T07:00:51.000Z</published>
    <updated>2017-12-04T01:54:51.385Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><img src="/image/disk.jpg" alt=""><br></div><p>磁盘（硬盘）主要由盘体、控制电路板和接口部件等组成，如下图所示：</p><p><img src="/image/硬盘的外观.jpg" alt=""></p><p>盘体是一个封装了多个盘片的腔体；控制电路板上主要有硬盘BIOS、硬盘缓存（即cache）和主控制芯片等单元，如下图所示；接口部件包括电源插座、数据接口和主从跳线等，数据接口是硬盘与主板、内存之间进行数据交换的通道。</p><p><img src="/image/控制电路板.jpg" alt=""></p><a id="more"></a><h2 id="硬盘的内部结构"><a href="#硬盘的内部结构" class="headerlink" title="硬盘的内部结构"></a>硬盘的内部结构</h2><p>硬盘的内部结构通常专指盘体的内部结构。盘体是一个密封的腔体，里面密封着磁头、盘片（磁片、碟片）等部件，如下图所示：</p><p><img src="/image/硬盘内部结构.jpg" alt=""></p><p>接下来了解一下硬盘的盘面，柱面，磁道和扇区的概念。如下图所示，其中，A表示磁道，B表示扇面，C表示扇区，D表示簇。</p><p><img src="/image/磁盘基本概念.png" alt=""></p><h3 id="盘面"><a href="#盘面" class="headerlink" title="盘面"></a>盘面</h3><p><img src="/image/盘面.jpg" alt=""></p><p>硬盘一般会有一个或多个盘片，每个盘片可以有两个<strong>盘面</strong>(Side)，即第1个盘片的正面称为0面，反面称为1面；第2个盘片的正面称为2面，反面称为3面…以此类推。每个盘面对应一个<strong>磁头</strong>(Head)用于读写数据，第一个盘面的正面的磁头称为0磁头，背面称为1磁头；第二个盘片正面的磁头称为2磁头，背面称为3磁头…以此类推。盘面数和磁头数是相等的。关机时磁头停留在盘片启停区，开机时磁头“飞行”在磁盘片上方。为了避免磁盘和磁头损坏，建议不要强制关机。</p><h3 id="磁道"><a href="#磁道" class="headerlink" title="磁道"></a>磁道</h3><p>每个盘片的每个盘面被划分成多个狭窄的<strong>同心圆环</strong>，数据就是存储在这样的同心圆环上，我们将这样的圆环称为<strong>磁道</strong>(Track)，每个盘面可以划分多个磁道。关机时磁头停留在硬盘的着陆区(Landing Zone)，这个着陆区以前是位于离盘心最近的区域，不存放任何数据。</p><p>在每个盘面的最外圈，离盘心最远的地方是“0”磁道，向盘心方向依次增长为1磁道、2磁道等等。硬盘数据的存放就是从最外圈开始。</p><h3 id="扇区"><a href="#扇区" class="headerlink" title="扇区"></a>扇区</h3><p>每个磁道划分成若干弧段，每段称为一个<strong>扇区</strong>(Sector)。扇区是硬盘上存储的物理单位，每扇区大小是512字节，大小不可改变。<strong><em>扇区的编号是从1开始，而不是0，这一点需要注意</em></strong>。</p><p>另外，硬盘在划分扇区时，和软盘是有一定区别的。软盘的一个磁道中，扇区号一般依次编排，如1号、2号、3号…以此类推。但在硬盘磁道中，扇区号是按照某个间隔跳跃着编排。比如，2号扇区并不是1号扇区后的按顺序的第一个而是第八个，3号扇区又是2号扇区后的按顺序的第八个，依此类推，这个“八”称为交叉因子。</p><h3 id="柱面"><a href="#柱面" class="headerlink" title="柱面"></a>柱面</h3><p><img src="/image/柱面.jpg" alt=""></p><p>柱面其实是我们抽象出来的一个逻辑概念,不同面上相同磁道编号则组成了一个圆柱面，即所称的<strong>柱面</strong>(Cylinder)。这里要注意，硬盘数据的读写是按柱面进行，即磁头读写数据时首先在同一柱面内从0磁头开始进行操作，依次向下在同一柱面的不同盘面(即磁头上)进行操作，只有在同一柱面所有的磁头全部读写完毕后磁头才转移到下一柱面，因为选取磁头只需通过电子切换即可，而选取柱面则必须通过机械切换。电子切换比从在机械上磁头向邻近磁道移动快得多。因此，数据的读写按柱面进行，而不按盘面进行。读写数据都是按照这种方式进行，尽可能提高了硬盘读写效率。</p><h3 id="簇"><a href="#簇" class="headerlink" title="簇"></a>簇</h3><p><img src="/image/簇.jpg" alt=""></p><p>将物理相邻的若干个扇区称为了一个<strong>簇</strong>。<strong><em>操作系统读写磁盘的基本单位是扇区，而文件系统的基本单位是簇(Cluster)</em></strong>。在Windows下，随便找个几字节的文件，在其上面点击鼠标右键选择属性，看看实际大小与占用空间两项内容，如大小：15 字节 (15 字节)， 占用空间：4.00 KB (4，096 字节)。这里的占用空间就是你机器分区的簇大小，因为再小的文件都会占用空间，逻辑基本单位是4K，所以都会占用4K。 簇一般有这几类大小 4K，8K，16K，32K，64K等。簇越大存储性能越好，但空间浪费严重。簇越小性能相对越低，但空间利用率高。NTFS格式的文件系统簇的大小为4K。</p><h3 id="容量计算公式"><a href="#容量计算公式" class="headerlink" title="容量计算公式"></a>容量计算公式</h3><blockquote><p>硬盘容量 = 盘面数×柱面数×扇区数×512字节</p></blockquote><h2 id="硬盘读写数据的过程"><a href="#硬盘读写数据的过程" class="headerlink" title="硬盘读写数据的过程"></a>硬盘读写数据的过程</h2><p>现代硬盘寻道都是采用CHS(Cylinder Head Sector)的方式，硬盘读取数据时，读写磁头沿径向移动，移到要读取的扇区所在磁道的上方，这段时间称为<strong>寻道时间</strong>(seek time)。因读写磁头的起始位置与目标位置之间的距离不同，寻道时间也不同。目前硬盘一般为2到30毫秒，平均约为9毫秒。磁头到达指定磁道后，然后通过盘片的旋转，使得要读取的扇区转到读写磁头的下方，这段时间称为<strong>旋转延迟时间</strong>(rotational latencytime)。</p><p>一个7200（转/每分钟）的硬盘，每旋转一周所需时间为60×1000÷7200=8.33毫秒，则平均旋转延迟时间为8.33÷2=4.17毫秒（平均情况下，需要旋转半圈）。平均寻道时间和平均旋转延迟称为<strong>平均存取时间</strong>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="http://zhengjianglong.leanote.com/post/linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA" target="_blank" rel="external">linux磁盘管理与分区</a><br>[2] <a href="http://blog.csdn.net/tianxueer/article/details/2689117" target="_blank" rel="external">硬盘内部硬件结构和工作原理详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;/image/disk.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;磁盘（硬盘）主要由盘体、控制电路板和接口部件等组成，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/硬盘的外观.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;盘体是一个封装了多个盘片的腔体；控制电路板上主要有硬盘BIOS、硬盘缓存（即cache）和主控制芯片等单元，如下图所示；接口部件包括电源插座、数据接口和主从跳线等，数据接口是硬盘与主板、内存之间进行数据交换的通道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/控制电路板.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机体系结构" scheme="https://TODOING.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="存储器" scheme="https://TODOING.github.io/tags/%E5%AD%98%E5%82%A8%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>现代操作系统（第4版）</title>
    <link href="https://TODOING.github.io/2017/11/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E7%AC%AC4%E7%89%88%EF%BC%89/"/>
    <id>https://TODOING.github.io/2017/11/13/操作系统/现代操作系统（第4版）/</id>
    <published>2017-11-13T08:57:19.000Z</published>
    <updated>2017-12-04T01:52:25.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/mos_4.jpg" alt=""><br><a id="more"></a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/mos_4.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://TODOING.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="读书笔记" scheme="https://TODOING.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法分析：C语言描述（第2版）</title>
    <link href="https://TODOING.github.io/2017/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9AC%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89/"/>
    <id>https://TODOING.github.io/2017/11/13/数据结构/数据结构与算法分析：C语言描述（第2版）/</id>
    <published>2017-11-13T08:56:59.000Z</published>
    <updated>2017-12-04T01:52:05.261Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ds_and_aa_c_2.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/ds_and_aa_c_2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://TODOING.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="读书笔记" scheme="https://TODOING.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成与设计：硬件软件接口（第5版）</title>
    <link href="https://TODOING.github.io/2017/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%9A%E7%A1%AC%E4%BB%B6%E8%BD%AF%E4%BB%B6%E6%8E%A5%E5%8F%A3%EF%BC%88%E7%AC%AC5%E7%89%88%EF%BC%89/"/>
    <id>https://TODOING.github.io/2017/11/13/计算机组成/计算机组成与设计：硬件软件接口（第5版）/</id>
    <published>2017-11-13T08:56:39.000Z</published>
    <updated>2017-12-04T01:51:05.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cod_5.jpg" alt=""></p><a id="more"></a><hr><h2 id="第-1-章-计算机概要与技术"><a href="#第-1-章-计算机概要与技术" class="headerlink" title="第 1 章 计算机概要与技术"></a>第 1 章 计算机概要与技术</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>计算机体系结构中的8个伟大思想</p><ul><li>面向摩尔定律的设计</li><li>使用抽象简化设计</li><li>加速大概率事件</li><li>通过并行（parallel）提高性能</li><li>通过流水线（pipelining）提高性能</li><li>通过预测（prediction）提高性能</li><li>存储器层次</li><li>通过冗余提高可靠性</li></ul></blockquote><hr><blockquote><p><code>服务器</code>: 用于为<strong>多用户</strong>运行<strong>大型程序</strong>的计算机，通常由多个用户<strong>并行</strong>使用，并且一般通过<strong>网络</strong>访问，强调<strong>可靠性</strong>。</p><ul><li>服务器适合执行<strong>大负载</strong>任务，如单个的复杂应用（科学的或工程的）或大量的简单作业（大型Web服务器）。</li><li><code>负载(Load)</code>：相当于工作量（Work）。</li><li>In UNIX computing, the system <strong>load</strong> is a measure of the amount of <strong>computational work</strong> that a computer system performs。</li></ul></blockquote><hr><blockquote><p><code>云计算</code>: 在网络上提供服务的<strong>大型服务器集群</strong>，一些运营商根据应用需求出租不同数量的服务器。</p><ul><li>云计算替代了传统的服务器，它依赖于称为<strong>仓储规模计算机</strong>（Warehouse Scale Computing，WSC）的巨型数据中心。（最大规模的集群，使用数万个服务器）</li><li><code>集群</code>：指一组<strong>桌面计算机</strong>或<strong>服务器</strong>通过<strong>局域网</strong>连在一起，运转方式类似于一个更大型的计算机。每个节点都运行自己的操作系统，节点之间使用<strong>网络协议</strong>进行通信。</li></ul></blockquote><hr><blockquote><p><code>软件即服务</code>: 在网络上以服务的方式提供软件和数据。其运行方式通常不是在本地设备上运行所有的二进制代码，而是通过诸如运行在本地客户端的浏览器等小程序登录到远程服务器上执行。典型的例子是Web搜索和社交网络，再比如PIE遥感云服务，通过在浏览器中登录PIE云，然后在服务器上执行相应的遥感算法，并将结果通过浏览器反馈给用户。</p></blockquote><hr><blockquote><p>现在计算机的特征是<strong>处理器的并行性</strong>和<strong>内存的层次性</strong>。</p><ul><li><strong><em>所以要学会并行程序的开发，多了解并行的相关知识，或许这就是下一个机会</em></strong>。</li></ul></blockquote><hr><blockquote><p>影响程序性能的硬件和软件因素：</p><ul><li>算法：决定了<strong>源码级语句</strong>的数量和<strong>I/O操作</strong>的数量。</li><li>编程语言、编译器和体系结构：决定了<strong>每条</strong>源码级语句对应的<strong>计算机指令</strong>数量。</li><li>处理器（CPU）和存储系统（RAM）：决定了<strong>指令</strong>的<strong>执行速度</strong>。</li><li>I/O系统（硬件和操作系统）：决定了<strong>I/O操作</strong>可能的<strong>执行速度</strong>。</li></ul></blockquote><hr><blockquote><p><code>指令集体系结构</code>：也叫体系结构，是低层次软件和硬件之间的<strong>抽象接口</strong>，包含了需要编写正确运行的机器语言程序所需要的<strong>全部</strong>信息，包括<strong>指令</strong>、<strong>寄存器</strong>、<strong>存储访问</strong>和<strong>I/O</strong>等。</p></blockquote><hr><blockquote><p><code>响应时间</code>：也叫执行时间、墙上时钟时间、消逝时间，是计算机完成某任务所需要的<strong>总时间</strong>，包括硬盘访问、内存访问、I/O访问、操作系统开销和CPU执行时间等。<br><code>CPU执行时间</code>：简称CPU时间，执行某一任务在CPU上所花费的时间，不包括等待I/O或运行其他程序的时间，包括用户和系统CPU时间。<br><code>用户CPU时间</code>：在程序本身所花费的CPU的时间。<br><code>系统CPU时间</code>：为执行程序而花费在操作系统上的时间。</p></blockquote><hr><blockquote><p><code>吞吐率</code>：也叫带宽，性能的另一种度量参数，表示<strong>单位时间</strong>内完成的<strong>任务数量</strong>。<br><code>系统性能</code>：空载系统的响应时间。<br><code>CPU性能</code>：表示用户CPU时间。</p></blockquote><hr><blockquote><p><code>CPI</code>：每条指令的时钟周期数，表示执行某个程序或者程序片段时每条指令所需的时钟周期平均数（总时钟周期数除以指令数，不同指令所需要的时钟周期数可能不同）。<br><code>IPC</code>: 每个时钟周期所执行的指令条数（instruction per clock cycle）。</p></blockquote><hr><blockquote><p>唯一能够被完全可靠测量的计算机性能指标是<strong>时间</strong>。</p></blockquote><hr><blockquote><p><code>工作负载</code>：运行在计算机上的<strong>一组程序</strong>，可以直接使用用户的一组实际应用程序，也可以从实际程序中构建。一个典型的工作负载必须指明程序和相应的频率。</p></blockquote><hr><blockquote><p><code>MIPS（每秒百万条指令）</code>：基于百万条指令的程序执行速度的一种测量。指令条数除以执行时间与10^6之积就得到了MIPS。</p></blockquote><h2 id="第-2-章-指令：计算机的语言"><a href="#第-2-章-指令：计算机的语言" class="headerlink" title="第 2 章 指令：计算机的语言"></a>第 2 章 指令：计算机的语言</h2><h2 id="第-3-章-计算机的算术运算"><a href="#第-3-章-计算机的算术运算" class="headerlink" title="第 3 章 计算机的算术运算"></a>第 3 章 计算机的算术运算</h2><h2 id="第-4-章-处理器"><a href="#第-4-章-处理器" class="headerlink" title="第 4 章 处理器"></a>第 4 章 处理器</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><h2 id="第-5-章-大容量和高速度：开发存储器层次结构"><a href="#第-5-章-大容量和高速度：开发存储器层次结构" class="headerlink" title="第 5 章 大容量和高速度：开发存储器层次结构"></a>第 5 章 大容量和高速度：开发存储器层次结构</h2><h2 id="第-6-章-从客户端到云的并行处理器"><a href="#第-6-章-从客户端到云的并行处理器" class="headerlink" title="第 6 章 从客户端到云的并行处理器"></a>第 6 章 从客户端到云的并行处理器</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/cod_5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机体系结构" scheme="https://TODOING.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="读书笔记" scheme="https://TODOING.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>编码：隐匿在计算机软硬件背后的语言（第2版）</title>
    <link href="https://TODOING.github.io/2017/11/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%BC%96%E7%A0%81%EF%BC%9A%E9%9A%90%E5%8C%BF%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E8%83%8C%E5%90%8E%E7%9A%84%E8%AF%AD%E8%A8%80%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89/"/>
    <id>https://TODOING.github.io/2017/11/13/计算机组成/编码：隐匿在计算机软硬件背后的语言（第2版）/</id>
    <published>2017-11-13T08:56:12.000Z</published>
    <updated>2017-12-04T01:50:09.573Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/code.jpg" alt=""><br><a id="more"></a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/code.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="计算机体系结构" scheme="https://TODOING.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="读书笔记" scheme="https://TODOING.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
