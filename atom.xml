<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彭雷的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://TODOING.github.io/"/>
  <updated>2017-11-08T01:10:08.465Z</updated>
  <id>https://TODOING.github.io/</id>
  
  <author>
    <name>PengLei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第 1 章 计算机概要与技术</title>
    <link href="https://TODOING.github.io/2017/11/07/%E7%AC%AC-1-%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    <id>https://TODOING.github.io/2017/11/07/第-1-章-计算机概要与技术/</id>
    <published>2017-11-07T09:37:56.000Z</published>
    <updated>2017-11-08T01:10:08.465Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image/organization.jpg" alt=""></p><ol><li>个人计算机：强调对<strong>单用户</strong>提供良好的性能。</li><li>服务器：用于为<strong>多用户</strong>运行<strong>大型程序</strong>的计算机，通常由多个用户<strong>并行</strong>使用，并且一般通过<strong>网络</strong>访问，强调<strong>可靠性</strong>。<ul><li>服务器适合执行大<strong>负载</strong>任务，如单个的复杂应用（科学的或工程的）或大量的简单作业（大型Web服务器）。</li><li><code>负载(Load)</code>：相当于工作量（Work）。</li><li>In UNIX computing, the system <strong>load</strong> is a measure of the amount of <strong>computational work</strong> that a computer system performs。</li></ul></li><li><code>云计算</code>：在网络上提供服务的<strong>大型服务器集群</strong>，一些运营商根据应用需求出租不同数量的服务器。<ul><li>云计算替代了传统的服务器，它依赖于称为<strong>仓储规模计算机</strong>（Warehouse Scale Computing，WSC）的巨型数据中心。（最大规模的集群，使用数万个服务器）</li><li><code>集群</code>：指一组<strong>桌面计算机</strong>或<strong>服务器</strong>通过<strong>局域网</strong>连在一起，运转方式类似于一个更大型的计算机。每个节点都运行自己的操作系统，节点之间使用<strong>网络协议</strong>进行通信。</li></ul></li><li><code>软件即服务</code>：在网络上以服务的方式提供软件和数据。其运行方式通常不是在本地设备上运行所有的二进制代码，而是通过诸如运行在本地客户端的浏览器等小程序登录到远程服务器上执行。典型的例子是Web搜索和社交网络，再比如PIE遥感云服务，通过在浏览器中登录PIE云，然后在服务器上执行相应的遥感算法，并将结果通过浏览器反馈给用户。</li><li>现在计算机的特征是<strong>处理器的并行性</strong>和<strong>内存的层次性</strong>。<ul><li><strong><em>所以要学会并行程序的开发，多了解并行的相关知识，或许这就是下一个机会</em></strong>。</li></ul></li><li>影响程序性能的硬件和软件因素：</li></ol><ul><li>算法：决定了<strong>源码级语句</strong>的数量和<strong>I/O操作</strong>的数量。</li><li>编程语言、编译器和体系结构：决定了<strong>每条</strong>源码级语句对应的<strong>计算机指令</strong>数量。</li><li>处理器（CPU）和存储系统（RAM）：决定了<strong>指令</strong>的<strong>执行速度</strong>。</li><li>I/O系统（硬件和操作系统）：决定了<strong>I/O操作</strong>可能的<strong>执行速度</strong>。</li></ul><ol><li><code>指令集体系结构</code>：也叫体系结构，是低层次软件和硬件之间的<strong>抽象接口</strong>，包含了需要编写正确运行的机器语言程序所需要的<strong>全部</strong>信息，包括<strong>指令</strong>、<strong>寄存器</strong>、<strong>存储访问</strong>和<strong>I/O</strong>等。</li><li>移动设备中，比如手机或ipad，使用<strong>闪存</strong>来做二级存储。</li><li>局域网通过<strong>交换机</strong>进行连接，可以提供路由与安全服务；广域网以<strong>光纤</strong>为基础，通过<strong>路由器</strong>进行连接。</li><li><code>晶体管</code>：一种由电信号控制的<strong>简单开关</strong>。</li><li><code>集成电路（IC）</code>：由成千上万个晶体管组成的<strong>芯片</strong>。</li><li><code>芯片（chip）</code>：从晶圆中切割出来的一个单独的矩形区域。</li><li><code>响应时间</code>：也叫执行时间、墙上时钟时间、消逝时间，是计算机完成某任务所需要的<strong>总时间</strong>，包括硬盘访问、内存访问、I/O访问、操作系统开销和CPU执行时间等。</li><li><code>吞吐率</code>：也叫带宽，性能的另一种度量参数，表示<strong>单位时间</strong>内完成的<strong>任务数量</strong>。</li><li><code>CPU执行时间</code>：简称CPU时间，执行某一任务在CPU上所花费的时间，不包括等待I/O或运行其他程序的时间，包括用户和系统CPU时间。</li><li><code>用户CPU时间</code>：在程序本身所花费的CPU的时间。</li><li><code>系统CPU时间</code>：为执行程序而花费在操作系统上的时间。</li><li><code>系统性能</code>：空载系统的响应时间。</li><li><code>CPU性能</code>：表示用户CPU时间。</li><li><code>CPI</code>：每条指令的时钟周期数，表示执行某个程序或者程序片段时每条指令所需的时钟周期平均数（总时钟周期数除以指令数，不同指令所需要的时钟周期数可能不同）。</li><li>唯一能够被完全可靠测量的计算机性能指标是<strong>时间</strong>。</li><li><code>工作负载</code>：运行在计算机上的<strong>一组程序</strong>，可以直接使用用户的一组实际应用程序，也可以从实际程序中构建。一个典型的工作负载必须指明程序和相应的频率。</li><li><code>MIPS（每秒百万条指令）</code>：基于百万条指令的程序执行速度的一种测量。指令条数除以执行时间与10^6之积就得到了MIPS。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;image/organization.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;个人计算机：强调对&lt;strong&gt;单用户&lt;/strong&gt;提供良好的性能。&lt;/li&gt;
&lt;li&gt;服务器：用于为&lt;strong&gt;多用户&lt;/strong&gt;运行&lt;stron
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://TODOING.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机组成原理" scheme="https://TODOING.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://TODOING.github.io/2017/11/07/Hello-World/"/>
    <id>https://TODOING.github.io/2017/11/07/Hello-World/</id>
    <published>2017-11-07T04:21:29.000Z</published>
    <updated>2017-11-08T01:10:08.465Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image/dream.jpg" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;image/dream.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cla
      
    
    </summary>
    
      <category term="Linux" scheme="https://TODOING.github.io/categories/Linux/"/>
    
    
      <category term="c/c++" scheme="https://TODOING.github.io/tags/c-c/"/>
    
  </entry>
  
</feed>
