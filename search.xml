<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[常用网站]]></title>
    <url>%2F2017%2F12%2F04%2F%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[编程语言C/C++Ccppreference http://en.cppreference.com/w/c-英文版http://zh.cppreference.com/w/c-中文版 C++cppreference http://en.cppreference.com/w/cpp-英文版http://zh.cppreference.com/w/cpp-中文版 cplusplus http://www.cplusplus.com/reference/ LinuxLinux命令大全 http://man.linuxde.net/ 鸟哥的Linux私房菜 http://linux.vbird.org/ Learn Vim Progressively http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/]]></content>
      <tags>
        <tag>常用网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2017%2F12%2F03%2FLinux%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[文件和目录管理mkdir命令创建目录 语法 mkdir (选项)(参数) 选项 -Z : 设置安全上下文，当使用SELinux时有效;-m&lt;目标属性&gt; 或 –mode&lt;目标属性&gt; : 建立目录的同时设置目录的权限;-p 或 –parents : 若所要建立的目录的上层目录尚未建立，则会一并建立上层目录;–version : 显示版本信息。 参数 目录 : 指定要创建的目录列表，多个目录之间用空格隔开。 实例在目录/home/pl下建立子目录test，并且只有文件主有读、写和执行权限，其他人无权访问 mkdir -m 700 /home/pl/test 在当前目录中建立bin下的os_1目录，权限设置为文件主可读、写和执行，同组用户可读和执行，其他用户无权访问 mkdir -p-m 750 bin/os_1]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[磁盘存储器]]></title>
    <url>%2F2017%2F11%2F15%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%2F%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%99%A8%2F</url>
    <content type="text"><![CDATA[磁盘（硬盘）主要由盘体、控制电路板和接口部件等组成，如下图所示： 盘体是一个封装了多个盘片的腔体；控制电路板上主要有硬盘BIOS、硬盘缓存（即cache）和主控制芯片等单元，如下图所示；接口部件包括电源插座、数据接口和主从跳线等，数据接口是硬盘与主板、内存之间进行数据交换的通道。 硬盘的内部结构硬盘的内部结构通常专指盘体的内部结构。盘体是一个密封的腔体，里面密封着磁头、盘片（磁片、碟片）等部件，如下图所示： 接下来了解一下硬盘的盘面，柱面，磁道和扇区的概念。如下图所示，其中，A表示磁道，B表示扇面，C表示扇区，D表示簇。 盘面 硬盘一般会有一个或多个盘片，每个盘片可以有两个盘面(Side)，即第1个盘片的正面称为0面，反面称为1面；第2个盘片的正面称为2面，反面称为3面…以此类推。每个盘面对应一个磁头(Head)用于读写数据，第一个盘面的正面的磁头称为0磁头，背面称为1磁头；第二个盘片正面的磁头称为2磁头，背面称为3磁头…以此类推。盘面数和磁头数是相等的。关机时磁头停留在盘片启停区，开机时磁头“飞行”在磁盘片上方。为了避免磁盘和磁头损坏，建议不要强制关机。 磁道每个盘片的每个盘面被划分成多个狭窄的同心圆环，数据就是存储在这样的同心圆环上，我们将这样的圆环称为磁道(Track)，每个盘面可以划分多个磁道。关机时磁头停留在硬盘的着陆区(Landing Zone)，这个着陆区以前是位于离盘心最近的区域，不存放任何数据。 在每个盘面的最外圈，离盘心最远的地方是“0”磁道，向盘心方向依次增长为1磁道、2磁道等等。硬盘数据的存放就是从最外圈开始。 扇区每个磁道划分成若干弧段，每段称为一个扇区(Sector)。扇区是硬盘上存储的物理单位，每扇区大小是512字节，大小不可改变。扇区的编号是从1开始，而不是0，这一点需要注意。 另外，硬盘在划分扇区时，和软盘是有一定区别的。软盘的一个磁道中，扇区号一般依次编排，如1号、2号、3号…以此类推。但在硬盘磁道中，扇区号是按照某个间隔跳跃着编排。比如，2号扇区并不是1号扇区后的按顺序的第一个而是第八个，3号扇区又是2号扇区后的按顺序的第八个，依此类推，这个“八”称为交叉因子。 柱面 柱面其实是我们抽象出来的一个逻辑概念,不同面上相同磁道编号则组成了一个圆柱面，即所称的柱面(Cylinder)。这里要注意，硬盘数据的读写是按柱面进行，即磁头读写数据时首先在同一柱面内从0磁头开始进行操作，依次向下在同一柱面的不同盘面(即磁头上)进行操作，只有在同一柱面所有的磁头全部读写完毕后磁头才转移到下一柱面，因为选取磁头只需通过电子切换即可，而选取柱面则必须通过机械切换。电子切换比从在机械上磁头向邻近磁道移动快得多。因此，数据的读写按柱面进行，而不按盘面进行。读写数据都是按照这种方式进行，尽可能提高了硬盘读写效率。 簇 将物理相邻的若干个扇区称为了一个簇。操作系统读写磁盘的基本单位是扇区，而文件系统的基本单位是簇(Cluster)。在Windows下，随便找个几字节的文件，在其上面点击鼠标右键选择属性，看看实际大小与占用空间两项内容，如大小：15 字节 (15 字节)， 占用空间：4.00 KB (4，096 字节)。这里的占用空间就是你机器分区的簇大小，因为再小的文件都会占用空间，逻辑基本单位是4K，所以都会占用4K。 簇一般有这几类大小 4K，8K，16K，32K，64K等。簇越大存储性能越好，但空间浪费严重。簇越小性能相对越低，但空间利用率高。NTFS格式的文件系统簇的大小为4K。 容量计算公式 硬盘容量 = 盘面数×柱面数×扇区数×512字节 硬盘读写数据的过程现代硬盘寻道都是采用CHS(Cylinder Head Sector)的方式，硬盘读取数据时，读写磁头沿径向移动，移到要读取的扇区所在磁道的上方，这段时间称为寻道时间(seek time)。因读写磁头的起始位置与目标位置之间的距离不同，寻道时间也不同。目前硬盘一般为2到30毫秒，平均约为9毫秒。磁头到达指定磁道后，然后通过盘片的旋转，使得要读取的扇区转到读写磁头的下方，这段时间称为旋转延迟时间(rotational latencytime)。 一个7200（转/每分钟）的硬盘，每旋转一周所需时间为60×1000÷7200=8.33毫秒，则平均旋转延迟时间为8.33÷2=4.17毫秒（平均情况下，需要旋转半圈）。平均寻道时间和平均旋转延迟称为平均存取时间。 参考[1] linux磁盘管理与分区[2] 硬盘内部硬件结构和工作原理详解]]></content>
      <categories>
        <category>计算机体系结构</category>
      </categories>
      <tags>
        <tag>存储器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[现代操作系统（第4版）]]></title>
    <url>%2F2017%2F11%2F13%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2F%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E7%AC%AC4%E7%89%88%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法分析：C语言描述（第2版）]]></title>
    <url>%2F2017%2F11%2F13%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%EF%BC%9AC%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成与设计：硬件软件接口（第5版）]]></title>
    <url>%2F2017%2F11%2F13%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%9A%E7%A1%AC%E4%BB%B6%E8%BD%AF%E4%BB%B6%E6%8E%A5%E5%8F%A3%EF%BC%88%E7%AC%AC5%E7%89%88%EF%BC%89%2F</url>
    <content type="text"><![CDATA[第 1 章 计算机概要与技术基本概念 计算机体系结构中的8个伟大思想 面向摩尔定律的设计 使用抽象简化设计 加速大概率事件 通过并行（parallel）提高性能 通过流水线（pipelining）提高性能 通过预测（prediction）提高性能 存储器层次 通过冗余提高可靠性 服务器: 用于为多用户运行大型程序的计算机，通常由多个用户并行使用，并且一般通过网络访问，强调可靠性。 服务器适合执行大负载任务，如单个的复杂应用（科学的或工程的）或大量的简单作业（大型Web服务器）。 负载(Load)：相当于工作量（Work）。 In UNIX computing, the system load is a measure of the amount of computational work that a computer system performs。 云计算: 在网络上提供服务的大型服务器集群，一些运营商根据应用需求出租不同数量的服务器。 云计算替代了传统的服务器，它依赖于称为仓储规模计算机（Warehouse Scale Computing，WSC）的巨型数据中心。（最大规模的集群，使用数万个服务器） 集群：指一组桌面计算机或服务器通过局域网连在一起，运转方式类似于一个更大型的计算机。每个节点都运行自己的操作系统，节点之间使用网络协议进行通信。 软件即服务: 在网络上以服务的方式提供软件和数据。其运行方式通常不是在本地设备上运行所有的二进制代码，而是通过诸如运行在本地客户端的浏览器等小程序登录到远程服务器上执行。典型的例子是Web搜索和社交网络，再比如PIE遥感云服务，通过在浏览器中登录PIE云，然后在服务器上执行相应的遥感算法，并将结果通过浏览器反馈给用户。 现在计算机的特征是处理器的并行性和内存的层次性。 所以要学会并行程序的开发，多了解并行的相关知识，或许这就是下一个机会。 影响程序性能的硬件和软件因素： 算法：决定了源码级语句的数量和I/O操作的数量。 编程语言、编译器和体系结构：决定了每条源码级语句对应的计算机指令数量。 处理器（CPU）和存储系统（RAM）：决定了指令的执行速度。 I/O系统（硬件和操作系统）：决定了I/O操作可能的执行速度。 指令集体系结构：也叫体系结构，是低层次软件和硬件之间的抽象接口，包含了需要编写正确运行的机器语言程序所需要的全部信息，包括指令、寄存器、存储访问和I/O等。 响应时间：也叫执行时间、墙上时钟时间、消逝时间，是计算机完成某任务所需要的总时间，包括硬盘访问、内存访问、I/O访问、操作系统开销和CPU执行时间等。CPU执行时间：简称CPU时间，执行某一任务在CPU上所花费的时间，不包括等待I/O或运行其他程序的时间，包括用户和系统CPU时间。用户CPU时间：在程序本身所花费的CPU的时间。系统CPU时间：为执行程序而花费在操作系统上的时间。 吞吐率：也叫带宽，性能的另一种度量参数，表示单位时间内完成的任务数量。系统性能：空载系统的响应时间。CPU性能：表示用户CPU时间。 CPI：每条指令的时钟周期数，表示执行某个程序或者程序片段时每条指令所需的时钟周期平均数（总时钟周期数除以指令数，不同指令所需要的时钟周期数可能不同）。IPC: 每个时钟周期所执行的指令条数（instruction per clock cycle）。 唯一能够被完全可靠测量的计算机性能指标是时间。 工作负载：运行在计算机上的一组程序，可以直接使用用户的一组实际应用程序，也可以从实际程序中构建。一个典型的工作负载必须指明程序和相应的频率。 MIPS（每秒百万条指令）：基于百万条指令的程序执行速度的一种测量。指令条数除以执行时间与10^6之积就得到了MIPS。 第 2 章 指令：计算机的语言第 3 章 计算机的算术运算第 4 章 处理器基本概念流水线第 5 章 大容量和高速度：开发存储器层次结构第 6 章 从客户端到云的并行处理器]]></content>
      <categories>
        <category>计算机体系结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编码：隐匿在计算机软硬件背后的语言（第2版）]]></title>
    <url>%2F2017%2F11%2F13%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%2F%E7%BC%96%E7%A0%81%EF%BC%9A%E9%9A%90%E5%8C%BF%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E8%83%8C%E5%90%8E%E7%9A%84%E8%AF%AD%E8%A8%80%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>计算机体系结构</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
</search>
